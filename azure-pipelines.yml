Skip to main content
We use cookies to improve your experience on our websites and for advertising. Privacy Statement
Accept all Manage cookies
Search



LEVEL 10

35350/49599 XP
Docs  Learn  Browse  Manage build dependencies with Azure Artifacts  Exercise - Reference the package from the application
Exercise - Reference the package from the application
5 minutes
In this unit, you'll get the new Tailspin.SpaceGame.Web code that has the model classes removed. Instead of referencing the models directly, the code will reference them from the package you created in the previous unit.

Here is a list of the steps:

Get the new code from a branch of the original Tailspin.SpaceGame.Web repository.
Reference the new Models package, version 1.0.0.
To look for this package in your Azure Artifacts feed, change the build pipeline.
Watch the pipeline successfully build the app.
Fetch the branch from GitHub
Fetch the models-package branch from GitHub and check out, or switch to, that branch.

This branch contains the Space Game project you worked with in the previous modules, but the Models directory has been removed.

From a new instance of Visual Studio Code, open the integrated terminal.

Go to the mslearn-tailspin-spacegame-web directory. Here's an example that uses the home directory, ~.

Bash

Copy
cd ~/mslearn-tailspin-spacegame-web
From the File menu, select Open.

Go to the root directory of the Space Game web project.

(If you need a refresher, to see the full path, run the pwd command in the terminal window.)

You see the directory and file tree in the file explorer.

From the terminal, to fetch a branch named models-package from the Microsoft repository, run the following git commands. Then, switch to that branch.

Bash

Copy
git fetch upstream models-package
git checkout -b models-package upstream/models-package
The format of these commands enables you to get starter code from the Microsoft GitHub repository, known as upstream. Shortly, you'll push this branch up to your GitHub repository, known as origin.

As an optional step, verify that the Models directory no longer exists in the file explorer.

Instead, you see Controllers, Views, and other directories.

Reference the Models package
Open the Tailspin.SpaceGame.Web.csproj file, add the following PackageReference, and save the file.

XML

Copy
<ItemGroup>
  <PackageReference Include="Newtonsoft.Json" Version="12.0.1" />
  <PackageReference Include="Tailspin.SpaceGame.Web.Models" Version="1.0.0" />
</ItemGroup>
To include the pre-release prefix that was generated during the build process, modify the version number. Here's an example.

XML

Copy
<PackageReference Include="Tailspin.SpaceGame.Web.Models" Version="1.0.0-CI-20200610-165738" />
This references the Tailspin.SpaceGame.Web.Models package that you created in Azure Artifacts. Notice the version number, 1.0.0, plus the pre-release suffix. This matches the initial version that you published to Azure Artifacts in the previous unit.

 Note

When you save the file, Visual Studio Code might ask you to restore dependencies. We're not going to run this locally, so there is no need to restore the dependencies.

Add the pipeline configuration
The models-package branch doesn't contain an initial azure-pipelines.yml file. Here's your chance to create it.

From Visual Studio Code, select File > New File. Then, to save the blank file as azure-pipelines, in your project's root directory, select File > Save .yml*, such as ~/mslearn-tailspin-spacegame-web.

 Important

On Windows, from the Save as type field, ensure that you select YAML.

Copy the following YAML code into azure-pipelines.yml:

yml

Copy
trigger:
- '*'

pool:
  vmImage: 'ubuntu-18.04'
  demands:
  - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '3.1.300'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '5.6.0' 

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: NuGetCommand@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    vstsFeed: 'Space Game - web - Dependencies/Tailspin.SpaceGame.Web.Models'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()
The highlighted code shows where the pipeline restores dependencies, and looks in your Azure Artifacts feed for the dependencies that might be there.

Stage, commit, and push your changes to GitHub.

Bash

Copy
git add .
git commit -m "Add reference to Models package"
git push origin models-package
Go to Microsoft Azure Pipelines and watch the build run. The build picks up your Models package from Azure Artifacts, and builds the project successfully.

Next unit: Exercise - Push a change to your package

100 XP
Need help? See our troubleshooting guide or provide specific feedback by reporting an issue.

English (United States)
Manage cookies Previous Version Docs Blog Contribute Privacy & Cookies Terms of Use Trademarks Â© Microsoft 2021